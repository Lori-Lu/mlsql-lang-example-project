[{"kind":1,"language":"markdown","value":"# Try MLSQL\n\nA brief Hello, World tutorial to get started. Learn a bit about MLSQL code, tools, packages, and modules.","outputs":[]},{"kind":1,"language":"markdown","value":"This is your MLSQL code. In this code,you \n\n1. Load excel file as a table called hello_world.\n2. Select columns from table hello_world and create a new table called output.","outputs":[]},{"kind":2,"language":"mlsql","value":"load excel.`./example-data/excel/hello_world.xlsx` \nwhere header=\"true\" \nas hello_world;\n\nselect hello from hello_world as output;","outputs":[]},{"kind":1,"language":"markdown","value":"## Call code in an external module\n\nWhen you need your code to do something that might have been implemented by someone else, you can look for a package that has functions you can use in your code.","outputs":[]},{"kind":1,"language":"markdown","value":"[lib-core](https://gitee.com/allwefantasy/lib-core) is a module \nmaintained by [allwefantasy](https://github.com/allwefantasy). There are \nmany usage script in this module.","outputs":[]},{"kind":1,"language":"markdown","value":"In your code, you can use `include` statement to add new module requirements.","outputs":[]},{"kind":2,"language":"mlsql","value":"include lib.`gitee.com/allwefantasy/lib-core`\nwhere force=\"true\"\nand alias=\"libCore\";","outputs":[]},{"kind":1,"language":"markdown","value":"import package `udf.hello` from module libCore with `include` statement.\n\nScript hello contains a native UDF hello implemented by scala.","outputs":[]},{"kind":2,"language":"mlsql","value":"include local.`libCore.udf.hello`;\nselect hello() as name as output;","outputs":[]},{"kind":1,"language":"markdown","value":"## Macro Functions\n\nThe moudle support can help us reuse mlsql code.\nThere is another way avoiding code duplication and have the same effect like function/method in other language.","outputs":[]},{"kind":2,"language":"mlsql","value":"set loadExcel = '''\nload excel.`{0}` \nwhere header=\"true\" \nas {1}\n''';\n\n!loadExcel ./example-data/excel/hello_world.xlsx helloTable;","outputs":[]},{"kind":1,"language":"markdown","value":"In this code, you\n\n* Declare a variable `loadExcel` with `set` statment which we will talk later. The variable hold a mlsql code snippet.\n* The content of `loadExcel` have positional parameter `{0}`,`{1}`.\n* Invoke the variable as it is a command with prefix `!`. \n* The string following `!loadExcel`  will be passed by position.\n\nMLSQL also support named parameter.","outputs":[]},{"kind":2,"language":"mlsql","value":"set loadExcel = '''\nload excel.`${path}` \nwhere header=\"true\" \nas ${tableName}\n''';\n\n!loadExcel _ -path ./example-data/excel/hello_world.xlsx -tableName helloTable;","outputs":[]},{"kind":1,"language":"markdown","value":"1. The first string following `!loadExcel` must be `_`. The mlsql interpreter will decide how to process this command according to this flag.\n2. The named parameter use `${parameterName}` instead of `{positional number}`.","outputs":[]},{"kind":1,"language":"markdown","value":"## If\n\nMLSQL's if statements are more like the if statement in shell.\n\nWe desigh this feature with the following consideration:\n\n1. Follow the SQL style. e.g. using and/or instead &&/||. \n2. Assigh variable with `select` style.\n3. All functions in SQL including native UDF can be used in the expression.\n\nHere is a simple example.","outputs":[]},{"kind":2,"language":"mlsql","value":"set a = \"wow,jack\";\n\n!if ''' split(:a,\",\")[0] == \"jack\" ''';\n   select 1 as a as b;\n!else;\n   select 2 as a as b;\n!fi;\n\nselect * from b as output;","outputs":[]},{"kind":1,"language":"markdown","value":"Some complex examples","outputs":[]},{"kind":2,"language":"mlsql","value":"set a=\"jack,2\";\n\n!if ''' select split(:a,\",\")[0] as :name, split(:a,\",\")[1] as :num;\n:name == \"jack\" and :num == 3\n''';\n    select 0 as a as b;\n!elif ''' select split(:a,\",\")[1] as :num; :num==2 ''';\n    !if ''' 2==1 ''';\n       select 1.1 as a as b;\n    !else;\n       select 1.2 as a as b;\n    !fi;\n!else;\n  select 2 as a as b;\n!fi;\n\n\nselect * from b as output;","outputs":[]},{"kind":1,"language":"markdown","value":"In many cases we may need to decide which sql we should execute according to some condition \ne.g. the query result of some table.","outputs":[]},{"kind":2,"language":"mlsql","value":"select 1 as a as mockTable;\nset b_count=`select count(*) from mockTable ` where type=\"sql\" and mode=\"runtime\";\n\n!if ''':b_count > 11 ''';\n    \n    select 1 as a from b as final_table;\n!else;    \n    select 2 as a from b as final_table;\n!fi;    \n\nselect * from final_table as output;","outputs":[]},{"kind":1,"language":"markdown","value":"## Machine Learning","outputs":[]},{"kind":1,"language":"markdown","value":"Create some mock data table ","outputs":[]},{"kind":2,"language":"mlsql","value":"include project.`./src/common/mock_data.mlsql`;\n-- create mock/validate/test dataset.\nselect vec_dense(features) as features, label as label from mock_data as mock_data;\nselect * from mock_data as mock_data_validate;\nselect * from mock_data as mock_data_test;","outputs":[]},{"kind":1,"language":"markdown","value":"We choose classify algorithm RandomForest to train mock_data and finally save the model to path `/tmp/models/randomforest`.\nNotice that we can tunning the parameters required by algorithm following the `where` keyword.\nIf you are in windows please change the path which is fit you.","outputs":[]},{"kind":2,"language":"mlsql","value":"train mock_data as RandomForest.`/tmp/models/randomforest` where\n\nkeepVersion=\"true\" \n\nand evaluateTable=\"mock_data_validate\"\n\nand `fitParam.0.labelCol`=\"label\"\nand `fitParam.0.featuresCol`=\"features\"\nand `fitParam.0.maxDepth`=\"2\"\n;","outputs":[]},{"kind":1,"language":"markdown","value":"Batch predict","outputs":[]},{"kind":2,"language":"mlsql","value":"predict mock_data_test as RandomForest.`/tmp/models/randomforest`  as predicted_table;","outputs":[]},{"kind":1,"language":"markdown","value":"MLSQL have the magic power that a model can be converted to a UDF in SQL.","outputs":[]},{"kind":2,"language":"mlsql","value":"register RandomForest.`/tmp/models/randomforest` as model_predict;\nselect vec_array(model_predict(features)) as predicted_value from mock_data as output;","outputs":[]},{"kind":1,"language":"markdown","value":"## Python Script Support\n\n`Ray` is a build-in plugin in MLSQL which can execute Python script. \n\nThe power part is that you can \naccess the data in target table in Python and passed the result processed back as a new table.\n\nSome limitation for now:\n\n1. The schema of python output should be specify mannually.\n\n```shell\n!python conf \"schema=st(field(a,long))\";\n```","outputs":[]},{"kind":2,"language":"mlsql","value":"select 1 as a as mockTable;\n\n!python conf \"schema=st(field(a,long))\";\n-- !python env \"PYTHON_ENV=source /Users/allwefantasy/opt/anaconda3/bin/activate ray1.3.0\";\n\nrun command as Ray.`` where \ninputTable=\"mockTable\"\nand outputTable=\"newMockTable\"\nand code='''\nfrom pyjava.api.mlsql import RayContext\n\nray_context = RayContext.connect(globals(),None)\n\nnewrows = []\nfor row in ray_context.collect():\n    row[\"a\"] = 2\n    newrows.append(row)\n\n    \ncontext.build_result(newrows)\n''';\n\nselect * from newMockTable as output;","outputs":[]},{"kind":1,"language":"markdown","value":"In notebooke mode, you can write python code directly with some special comments.","outputs":[]},{"kind":2,"language":"mlsql","value":"select 1 as a as mockTable;","outputs":[]},{"kind":2,"language":"python","value":"#%python\n#%schema=st(field(a,long))\n#%input=mockTable\n#%output=newMockTable2\n#%cache=true\n\nfrom pyjava.api.mlsql import RayContext,PythonContext\n\ncontext:PythonContext = context\nray_context = RayContext.connect(globals(),None)\n\nnewrows = []\nfor row in ray_context.collect():\n    row[\"a\"] = 3\n    newrows.append(row)\n\n    \ncontext.build_result(newrows)","outputs":[]},{"kind":1,"language":"markdown","value":"Here are some usefull comments in python script:\n\n1. `#%python` tells the extension this cell is  a python script. \n2. `#%input=table1` tells the extension the input table name.\n3. `#%output=b_output` tells the result table of this python script processed.\n4. `#%schema=st(field(a,long))` python is a type-less language. So we need to tell the system the schema of output table.\n5. `#%dataMode=model` model|data. If you use `ray_context.foreach`,`ray_context.map_iter` then use dataMode `data`. Otherwize please keep dataMode as `moded`.\n6. `#%env=source /Users/allwefantasy/opt/anaconda3/bin/activate ray1.3.0`  Choose python env.\n\nThe most import hint is `#%schema`. If this is not set property, some weired exception may happens.\nIf local disk is used , you can use python to save the data to local disk and then using `load statement`\nto load the data as table again.","outputs":[]},{"kind":2,"language":"mlsql","value":"select * from newMockTable2 as output;","outputs":[]}]