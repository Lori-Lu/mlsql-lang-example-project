[{"kind":1,"language":"markdown","value":"# Try MLSQL\n\nA brief Hello, World tutorial to get started. Learn a bit about MLSQL code, tools, packages, and modules.","outputs":[]},{"kind":1,"language":"markdown","value":"This is your MLSQL code. In this code,you \n\n1. Load excel file as a table called hello_world.\n2. Select columns from table hello_world and create a new table called output.","outputs":[]},{"kind":2,"language":"mlsql","value":"load excel.`./example-data/excel/hello_world.xlsx` \nwhere header=\"true\" \nas hello_world;\n\nselect hello from hello_world as output;","outputs":[]},{"kind":1,"language":"markdown","value":"## Call code in an external module\n\nWhen you need your code to do something that might have been implemented by someone else, you can look for a package that has functions you can use in your code.","outputs":[]},{"kind":1,"language":"markdown","value":"[lib-core](https://gitee.com/allwefantasy/lib-core) is a module \nmaintained by [allwefantasy](https://github.com/allwefantasy). There are \nmany usage scripts in this module.","outputs":[]},{"kind":1,"language":"markdown","value":"In your code, you can use `include` statement to add new module requirements.","outputs":[]},{"kind":2,"language":"mlsql","value":"include lib.`gitee.com/allwefantasy/lib-core`\nwhere force=\"true\"\nand alias=\"libCore\";","outputs":[]},{"kind":1,"language":"markdown","value":"import package `udf.hello` from module libCore which is also use `include`.\n\nScript hello contains a native UDF hello implemented by scala.","outputs":[]},{"kind":2,"language":"mlsql","value":"include local.`libCore.udf.hello`;\nselect hello() as name as output;","outputs":[]},{"kind":1,"language":"markdown","value":"## Macro Functions\n\nThe module support can help us reuse mlsql code.\nThere is another way avoiding code duplication and have the same effect like function/method in other language.","outputs":[]},{"kind":2,"language":"mlsql","value":"set loadExcel = '''\nload excel.`{0}` \nwhere header=\"true\" \nas {1}\n''';\n\n!loadExcel ./example-data/excel/hello_world.xlsx helloTable;","outputs":[]},{"kind":1,"language":"markdown","value":"In this code, you\n\n* Declare a variable `loadExcel` with `set` statment which we will talk later. The variable hold a mlsql code snippet.\n* The content of `loadExcel` have positional parameter `{0}`,`{1}`.\n* Invoke the variable as it is a command with prefix `!`. \n* The string following `!loadExcel`  will be passed by position.\n\nMLSQL also supports named parameter.","outputs":[]},{"kind":2,"language":"mlsql","value":"set loadExcel = '''\nload excel.`${path}` \nwhere header=\"true\" \nas ${tableName}\n''';\n\n!loadExcel _ -path ./example-data/excel/hello_world.xlsx -tableName helloTable;","outputs":[]},{"kind":1,"language":"markdown","value":"1. The first string following `!loadExcel` must be `_`. The mlsql interpreter will decide how to process this command according to this flag.\n2. The named parameter use `${parameterName}` instead of `{positional number}`.","outputs":[]},{"kind":1,"language":"markdown","value":"## Native UDF\n\nMLSQL Lang also supports that the developers use Java/Scala to develop SQL UDF. Notice that \nthere is no installaltion and restart. You can define then use.","outputs":[]},{"kind":2,"language":"mlsql","value":"register ScriptUDF.`` as arrayLast \nwhere lang=\"scala\"\nand code='''def apply(a:Seq[String])={\n      a.last\n}'''\nand udfType=\"udf\";\n\nselect arrayLast(array(\"a\",\"b\")) as lastChar as output;","outputs":[]},{"kind":1,"language":"markdown","value":"In your code ,you create a UDF called `arrayLast` which get the last element of array and you implement this\nUDF with Scala. Once you define the UDF, you can use it in later immediately.","outputs":[]},{"kind":1,"language":"markdown","value":"## If\n\nMLSQL's if statements are more like the if statements in shell.\n\nWe desigh this feature with the following considerations:\n\n1. Follow the SQL style. e.g. using and/or instead &&/||. \n2. Assigh variable with `select` style.\n3. All functions in SQL including native UDF can be used in the expression.\n\nHere is a simple example.","outputs":[]},{"kind":2,"language":"mlsql","value":"set a = \"wow,jack\";\n\n!if ''' split(:a,\",\")[0] == \"jack\" ''';\n   select 1 as a as b;\n!else;\n   select 2 as a as b;\n!fi;\n\nselect * from b as output;","outputs":[]},{"kind":1,"language":"markdown","value":"Some complex examples","outputs":[]},{"kind":2,"language":"mlsql","value":"set a=\"jack,2\";\n\n!if ''' select split(:a,\",\")[0] as :name, split(:a,\",\")[1] as :num;\n:name == \"jack\" and :num == 3\n''';\n    select 0 as a as b;\n!elif ''' select split(:a,\",\")[1] as :num; :num==2 ''';\n    !if ''' 2==1 ''';\n       select 1.1 as a as b;\n    !else;\n       select 1.2 as a as b;\n    !fi;\n!else;\n  select 2 as a as b;\n!fi;\n\n\nselect * from b as output;","outputs":[]},{"kind":1,"language":"markdown","value":"In many cases we may need to decide which sql we should execute according to some condition \ne.g. the query result of some table.","outputs":[]},{"kind":2,"language":"mlsql","value":"select 1 as a as mockTable;\nset b_count=`select count(*) from mockTable ` where type=\"sql\" and mode=\"runtime\";\n\n!if ''':b_count > 11 ''';\n    \n    select 1 as a from b as final_table;\n!else;    \n    select 2 as a from b as final_table;\n!fi;    \n\nselect * from final_table as output;","outputs":[]},{"kind":1,"language":"markdown","value":"## Machine Learning\n\nCreate some mock data table ","outputs":[]},{"kind":2,"language":"mlsql","value":"include project.`./src/common/mock_data.mlsql`;\n-- create mock/validate/test dataset.\nselect vec_dense(features) as features, label as label from mock_data as mock_data;\nselect * from mock_data as mock_data_validate;\nselect * from mock_data as mock_data_test;","outputs":[]},{"kind":1,"language":"markdown","value":"We choose classify algorithm RandomForest to train mock_data and finally save the model to path `/tmp/models/randomforest`.\nNotice that we can tunning the parameters required by algorithm following the `where` keyword.\nIf you are in windows please change the path which is fit you.","outputs":[]},{"kind":2,"language":"mlsql","value":"train mock_data as RandomForest.`/tmp/models/randomforest` where\n\nkeepVersion=\"true\" \n\nand evaluateTable=\"mock_data_validate\"\n\nand `fitParam.0.labelCol`=\"label\"\nand `fitParam.0.featuresCol`=\"features\"\nand `fitParam.0.maxDepth`=\"2\"\n;","outputs":[]},{"kind":1,"language":"markdown","value":"Batch predict","outputs":[]},{"kind":2,"language":"mlsql","value":"predict mock_data_test as RandomForest.`/tmp/models/randomforest`  as predicted_table;","outputs":[]},{"kind":1,"language":"markdown","value":"MLSQL have the magic power that a model can be converted to a UDF in SQL.","outputs":[]},{"kind":2,"language":"mlsql","value":"register RandomForest.`/tmp/models/randomforest` as model_predict;\nselect vec_array(model_predict(features)) as predicted_value from mock_data as output;","outputs":[]},{"kind":1,"language":"markdown","value":"## Python Script Support\n\n`Ray` is a build-in plugin in MLSQL which can execute Python script. \n\nThe power part is that you can \naccess the data in target table in Python and pass the result processed back as a new table.\n\nSome limitation for now:\n\n1. The schema of python output should be specified mannually.\n\n```shell\n!python conf \"schema=st(field(a,long))\";\n```","outputs":[]},{"kind":2,"language":"mlsql","value":"select 1 as a as mockTable;\n\n!python conf \"schema=st(field(a,long))\";\n-- !python env \"PYTHON_ENV=source /Users/allwefantasy/opt/anaconda3/bin/activate ray1.3.0\";\n\nrun command as Ray.`` where \ninputTable=\"mockTable\"\nand outputTable=\"newMockTable\"\nand code='''\nfrom pyjava.api.mlsql import RayContext\n\nray_context = RayContext.connect(globals(),None)\n\nnewrows = []\nfor row in ray_context.collect():\n    row[\"a\"] = 2\n    newrows.append(row)\n\n    \ncontext.build_result(newrows)\n''';\n\nselect * from newMockTable as output;","outputs":[]},{"kind":1,"language":"markdown","value":"### Python Visulization\n\nIn following code, \n\n1. load excel data and get table called user_behavior.\n2. Use select statement to compute pv/uv by day and get table day_pv_uv.","outputs":[]},{"kind":2,"language":"mlsql","value":"load excel.`./example-data/excel/user-behavior.xlsx` where header=\"true\" as user_behavior;\n\nselect cast(datatime as date) as day,\n       sum(case when behavior_type = 'pv' then 1 else 0 end) as pv,\n       count(distinct user_id) as uv\nfrom user_behavior\ngroup by cast(datatime as date)\norder by day\nas day_pv_uv;","outputs":[]},{"kind":1,"language":"markdown","value":"Next, we create a python snippet to visualize the day_pv_uv table.\nThe three special comments on the top of the cell are:\n\n1. This is a pure python code\n2. The input table is da_pv_uv.\n3. The output schema of processed table is `st(field(content,string),field(mime,string))`\n\nWill all this infos the nodebook will translate the code to MLSQL code like `run table as Ray....`.\n\nIn the following example ,we take matplotlib as an example.","outputs":[]},{"kind":2,"language":"python","value":"#%python\n#%input=day_pv_uv\n#%schema=st(field(content,string),field(mime,string))\n\n\nfrom pyjava.api.mlsql import RayContext,PythonContext\nfrom pyjava.api import Utils\nimport matplotlib.pyplot as plt\n\n# type hint\ncontext:PythonContext = context\n\nray_context = RayContext.connect(globals(),None)\ndf = ray_context.to_pandas()\n\nplt.rcParams['font.sans-serif']=['SimHei'] #用来正常显示中文标签\nplt.rcParams['axes.unicode_minus'] = False #用来正常显示负号\n\nx1 = list(df['day'])\ny1 = list(df['pv'])\n\nx2 = list(df['day'])\ny2 = list(df['uv'])\n\nl1=plt.plot(x1,y1,'r--',label='PV')\nl2=plt.plot(x2,y2,'g--',label='UV')\n\nplt.plot(x1,y1,'ro-',x2,y2,'g+-')\nplt.title('PV/UV情况')\nplt.xlabel('row')\nplt.ylabel('column')\nplt.legend()\n\nUtils.show_plt(plt,context)","outputs":[]},{"kind":1,"language":"markdown","value":"Here are some usefull comments in python script:\n\n1. `#%python` tells the extension this cell is  a python script. \n2. `#%input=table1` tells the extension the input table name.\n3. `#%output=b_output` tells the result table of this python script processed.\n4. `#%schema=st(field(a,long))` python is a type-less language. So we need to tell the system the schema of output table.\n5. `#%dataMode=model` model|data. If you use `ray_context.foreach`,`ray_context.map_iter` then use dataMode `data`. Otherwize please keep dataMode as `moded`.\n6. `#%env=source /Users/allwefantasy/opt/anaconda3/bin/activate ray1.3.0`  Choose python env.\n\nThe most import hint is `#%schema`. If this is not set property, some weired exception may happens.\nIf local disk is used , you can use python to save the data to local disk and then using `load statement`\nto load the data as table again.","outputs":[]},{"kind":2,"language":"mlsql","value":"select * from newMockTable2 as output;","outputs":[]},{"kind":1,"language":"markdown","value":"## Plugin\n\nThe features  that MLSQL Lang includes out-of-the-box  are just start. MLSQL Lang Plugins let you\nadd new datasources, ETs, cleaners, HTTP endpoints and tools help you enhance the engine abillities \n\nMLSQL Lang's rich extensibility model lets plugin authors plug directly into MLSQL Lang engine.\n\nHere we will explain how to find,install and manager MLSQL plugins.\n\nMost MLSQL Lang plugins are developed by Java/Scala.","outputs":[]},{"kind":1,"language":"markdown","value":"Project [mlsql-plugins](https://github.com/allwefantasy/mlsql-plugins) offers many plugins.\nmlsql-excel, mlsql-assert, mlsql-shell is build-in plugins in MLSQL desktop version.\n\nSuppose we want a plugin which help up mock some data for machine learning, try paste command like following:","outputs":[]},{"kind":2,"language":"mlsql","value":"!plugin app remove  \"mlsql-mllib-3.0\";\n!plugin app add - \"mlsql-mllib-3.0\";","outputs":[]},{"kind":1,"language":"markdown","value":"Remove plugin:\n\n```sql\n!plugin app remove \"mlsql-mllib-3.0\";\n```\n\nNotice that  restart is required after removing or updating a plugin.","outputs":[]},{"kind":2,"language":"mlsql","value":"run command as SampleDatasetExt.`` \nwhere columns=\"id,features,label\" \nand size=\"100000\" \nand featuresSize=\"100\" \nand labelSize=\"2\" \nas mockData;","outputs":[]},{"kind":1,"language":"markdown","value":"In this code, we use `SampleDatasetExt` to create table `mockData` with three columns which are id, features,label.\nThe table have 100000 rows and the feature column is a array with length 100 and the label column is a enum number 0,1.\n\nThe ET `SampleDatasetExt` is from plugin `mlsql-mllib-3.0`.","outputs":[]},{"kind":2,"language":"mlsql","value":"select 1 as a,2 as b as mockTable;\n!columns remove a from mockTable;\nselect * from mockTable as output;","outputs":[]},{"kind":1,"language":"markdown","value":"It's a little difficult to exclude columns in standard SQL. \nMLSQL provide function `!columns` to achive this target in a convenient way.","outputs":[]},{"kind":1,"language":"markdown","value":"## Save Data","outputs":[]},{"kind":2,"language":"mlsql","value":"load excel.`./example-data/excel/hello_world.xlsx` \nwhere header=\"true\" \nas hello_world;\n\nsave overwrite hello_word as csv.`./tmp/hw` where header=\"true\";","outputs":[]}]