[{"kind":1,"language":"markdown","value":"## Code Example","outputs":[]},{"kind":1,"language":"markdown","value":"### Feishu","outputs":[]},{"kind":2,"language":"mlsql","value":"register ScriptUDF.`` as httpOKFunc where\nand lang=\"scala\"\nand udfType=\"udf\"\nand code='''\ndef apply(url: String)={\n  import org.apache.http.client.fluent.Request\n  val resp = Request.Get(url).execute().returnResponse()\n  if( resp.getStatusLine.getStatusCode == 200  ) true else false\n\n}\n''';\n\n!if '''select httpOKFunc(\"http://mlsql.tech\") AS :ok; :ok == false''';   \n  run command as FeishuMessageExt.`` where \n  text=\"mlsql.tech is down\" \n  AND webhook = \"https://open.feishu.cn/open-apis/bot/v2/hook/xxxxxxxxxxx\" \n  as output_1;\n!fi;","outputs":[]},{"kind":1,"language":"markdown","value":"### Email","outputs":[]},{"kind":2,"language":"mlsql","value":"load text.`/tmp/upload/nginx.log` as nginxTable;\n \n-- 日志文件的清洗和统计\nselect \n  access_host,access_page,count(1) as access_freq \nfrom (\n    select split(value,' ')[2] as access_host,split(value,' ')[7] as access_page \n    from (select * from nginxTable where value is not null)\n  )\nwhere \n  access_host !=\"-\"\ngroup by access_host,access_page \norder by access_freq desc\nlimit 10 as accessTable;\n\n-- 通过TableRepartition将输出的文件分区设置为1个\nrun accessTable as TableRepartition.`` where partitionType=\"hash\" and shuffle=\"false\" and partitionNum=\"1\" as newAccessTable;\n\nset savePath=\"/tmp/access.csv\";\n\n-- 保存PV统计数据为CSV格式的文件\nsave overwrite newAccessTable as csv.`${savePath}` where header=\"true\";\n\nset EMAIL_TITLE = \"MLSQL网站访问日志分析\"; \nset EMAIL_BODY = '''<div>Hi All,<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;日志分析完成，请查收邮件！</div><br/><hr/><div>Thanks,<br/>The MLSQL Opensource Team</div>''';\nset EMAIL_TO = \"userAccountNumber@qq.com, userAccountNumber@163.com\";\n\n-- 发送附件邮件到指定邮箱\nrun command as SendMessage.``\nwhere method=\"mail\"\nand content=\"${EMAIL_BODY}\"\nand from = \"userAccountNumber@qq.com\"\nand to = \"${EMAIL_TO}\"\nand subject = \"${EMAIL_TITLE}\"\nand contentType=\"text/html\"\nand attachmentContentType=\"text/csv\"\nand attachmentPaths=\"${savePath}\"\nand smtpHost = \"smtp.qq.com\"\nand smtpPort=\"587\"\nand `userName`=\"userAccountNumber@qq.com\"\nand password=\"***\"\n;","outputs":[]},{"kind":1,"language":"markdown","value":"### Python Lib","outputs":[]},{"kind":2,"language":"mlsql","value":"!python env \"PYTHON_ENV=source activate ray1.7.0\";\n\nload delta.`data.breast_cancer` as newTable;","outputs":[]},{"kind":2,"language":"mlsql","value":"-- Example 1\n\nset inModule=\"false\";\nset inputTable=\"newTable\";\nset outputTable=\"xgboostModelTable\";\nset rayAddress=\"127.0.0.1:10001\";\n\ninclude project.`src/algs/xgboost.mlsql`;\nsave overwrite xgboostModelTable as delta.`model.xgboost_breast_cancer`;","outputs":[]},{"kind":2,"language":"mlsql","value":"!show et;\n!lastCommand named ets;\nselect * from ets where name like \"%Random%\" as output;\n!show et/params/RandomForest;","outputs":[]},{"kind":2,"language":"mlsql","value":"-- Example 2\n\ntrain newTable as XGBoostExt.`data.breast_cancer` \nwhere rayAddress=\"127.0.0.1:10001\" \nas xgboostModelTable;","outputs":[]},{"kind":1,"language":"markdown","value":"### SQL static string interpolation","outputs":[]},{"kind":2,"language":"mlsql","value":"select \"\" as features, 1 as label as mockData;\n\nselect \n#set($colums=[\"features\",\"label\"])\n#foreach( $column in $colums )\n    SUM( case when `$column` is null or `$column`='' then 1 else 0 end ) as $column,\n#end\n 1 as a from mockData as output;","outputs":[]},{"kind":2,"language":"mlsql","value":" set sum_tpl = '''\nSUM( case when `{0}` is null or `{0}`='' then 1 else 0 end ) as {0}\n''';\n\nselect ${template.get(\"sum_tpl\",\"label\")},\n${template.get(\"sum_tpl\",\"label\")}\nfrom mockData as output;","outputs":[]},{"kind":1,"language":"markdown","value":"### MySQL Load Example","outputs":[]},{"kind":2,"language":"mlsql","value":"-- from jdbc driver 5.0 support useCursorFetch to make the fetchSize parameter works.\nconnect jdbc where\n url=\"jdbc:mysql://127.0.0.1:3306/wow?useUnicode=true&zeroDateTimeBehavior=convertToNull&characterEncoding=UTF-8&tinyInt1isBit=false&useCursorFetch=true\"\n and driver=\"com.mysql.jdbc.Driver\"\n and user=\"${sc_user}\"\n and password=\"${sc_password}\"\n as db1;\n\nload jdbc.`db1.user_profile`\nwhere fetchSize=\"1000\"  \n-- or row by row\n-- fetchSize=\"-2147483648\"  \nas user_profile;\n\n","outputs":[]},{"kind":1,"language":"markdown","value":"### Extract data from python lib","outputs":[]},{"kind":2,"language":"python","value":"#%python\n#%input=command\n#%output=b_output\n#%cache=true\n#%schema=st(field(features,array(double)),field(label,long)))\n#%dataMode=model\n#%env=source /Users/allwefantasy/opt/anaconda3/bin/activate ray1.7.0\n\nfrom sklearn.datasets import load_breast_cancer\nfrom pyjava.api.mlsql import RayContext,PythonContext\n\ncontext: PythonContext = context\nray_context = RayContext.connect(globals(), None)\ntrain_x, train_y = load_breast_cancer(return_X_y=True)\nrows = [{\"features\":row[0],\"label\":row[1]} for row in zip(train_x.tolist(),train_y.tolist())]\ncontext.build_result(rows)","outputs":[]},{"kind":2,"language":"mlsql","value":"save overwrite b_output as delta.`data.breast_cancer`;","outputs":[]},{"kind":1,"language":"markdown","value":"## Python Model to UDF\n","outputs":[]},{"kind":2,"language":"mlsql","value":"-- Step1  加载训练好的深度学习模型\nload delta.`ai_model.mnist_model` as mnist_model;\n\n-- Step2 将Tensorflow的深度学习模型注册成UDF函数\nregister Ray.`mnist_model` as model_predict \nwhere max_concurrency=\"8\"\nand   debugMode=\"true\";\n\n-- Step3  加载图片数据，做一些数据转换\nload parquet.`/tmp/minst-8` as mnist_data;\n\nselect cast(image as array<double>) as image \nfrom mnist_data limit 100 \nas new_mnist_data;\n\n-- Step4 使用前面注册的UDF对图片进行预测\nselect model_predict(array(image)) as predicted \nfrom  new_mnist_data \nas output;","outputs":[]},{"kind":1,"language":"markdown","value":"## HTTP AS Table","outputs":[]},{"kind":2,"language":"mlsql","value":"set a = \"1\";\nset a = \"b\" where type=\"defaultParam\";\n\nload Rest.`http://127.0.0.1:9004/run/script` where\n`config.connect-timeout`=\"10s\"\nand `config.method`=\"post\"\nand `config.socket-timeout`=\"10s\"\nand `header.content-type`=\"application/x-www-form-urlencoded\" \nand `form.sql`=\"select 1 as a as b;\"\nas apiTable;\n\n-- select cast(content as string) as content,status from apiTable as newTable;\n\nselect concat('{\"key\":',cast(content as string),'}') as content, status from apiTable as newTable;\n\nrun newTable as JsonExpandExt.`` where inputCol=\"content\" and structColumn=\"true\" as finalTable;\n\nselect array_max(transform(content.key,(value,i)->value.a)) as b from finalTable as output;\n\n-- !desc newTable;\n-- 上传文件到接口\n-- （安全问题，第一用户只能上传自己主目录的内容，\n-- 第二，我们通过权限系统可以限制用户可以访问的接口）\n-- 结果非200则抛出异常，保存失败\n-- save overwrite command as Rest.`http://127.0.0.1:9004/upload` where\n-- and `header.content-type`=\"multipart/form-data\" \n-- and `form.file-name`=\"monitor.csv\"\n-- and `form.file-path`=\"/tmp/monitor.csv\"\n-- and `form.param1`=\"wow\";","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"b\",\n\t\t\t\t\"type\": \"long\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"b\": 1\n\t\t}\n\t]\n}"}]}]