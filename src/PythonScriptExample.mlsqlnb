[{"kind":1,"language":"markdown","value":"## Mock Data\n\nWith the support of `jsonStr` datasource, users can \nbe easy to mock data.","outputs":[]},{"kind":2,"language":"mlsql","value":"-- mock some data\nset abc='''\n{ \"x\": 100, \"y\": 200, \"z\": 200 ,\"dataType\":\"A group\"}\n{ \"x\": 120, \"y\": 100, \"z\": 260 ,\"dataType\":\"B group\"}\n''';\nload jsonStr.`abc` as table1;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"dataType\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"x\",\n\t\t\t\t\"type\": \"long\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"y\",\n\t\t\t\t\"type\": \"long\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"z\",\n\t\t\t\t\"type\": \"long\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"dataType\": \"A group\",\n\t\t\t\"x\": 100,\n\t\t\t\"y\": 200,\n\t\t\t\"z\": 200\n\t\t},\n\t\t{\n\t\t\t\"dataType\": \"B group\",\n\t\t\t\"x\": 120,\n\t\t\t\"y\": 100,\n\t\t\t\"z\": 260\n\t\t}\n\t]\n}"}]},{"kind":1,"language":"markdown","value":"## Python Script Support\n\nThe line starts with `#%` will be treated as annotation/hint to tell the \nextension how to convert the python code to MLSQL code.\n\n1. `#%python` tells the extension this cell is  a python script. \n2. `#%input=table1` tells the extension the input table name.\n3. `#%output=b_output` tells the result table of this python script processed.\n4. `#%schema=st(field(a,long))` python is a type-less language. So we need to tell the system the schema of output table.\n5. `#%dataMode=model` model|data. If you use `ray_context.foreach`,`ray_context.map_iter` then use dataMode `data`. Otherwize please keep dataMode as `moded`.\n6. `#%env=source /Users/allwefantasy/opt/anaconda3/bin/activate ray1.3.0`  Choose python env.\n\nThe most import hint is `#%schema`. If this is not set property, some weired exception may happens.\nIf local disk is used , you can use python to save the data to local disk and then using `load statement`\nto load the data as table again.\n\nWith the support of ray, you can program python distributely easily.  If you do not need this feature, \njust set the second paramerter as None like following:\n\n```python\nray_context = RayContext.connect(globals(),None)\n```\n\nIf you want the support of ray, set the second parameter as the address of ray.\n\n## Python dependencies\n\n> We stronglly recommend using conda to manager your python env in your desktop\n","outputs":[]},{"kind":1,"language":"markdown","value":"\nIn order to run Python script in MLSQL, please make sure:\n\n1. Python 3.6+\n2. Install following package:\n\n\n```\npip install Cython\npip install ray==1.3.0\npip install aiohttp psutil setproctitle grpcio pandas\npip install watchdog requests click uuid \npip install pyjava\n```","outputs":[]},{"kind":2,"language":"python","value":"#%python\n#%input=table1\n#%output=b_output\n#%cache=true\n#%schema=st(field(a,long))\n#%dataMode=model\n#%env=source /Users/allwefantasy/opt/anaconda3/bin/activate ray1.3.0\n\n## This example shows how to write python script without ray.\nfrom pyjava.api.mlsql import RayContext\n\nray_context = RayContext.connect(globals(),None)\n\n## collect data from table table1.\n## Notice that you can only call this function(ray_context.collect()) once.\n## If you wannt invoke it serveral times, you can save it \n## in disk.\ndata = ray_context.collect()\n\ndef process():\n    for row in data:\n        newRow = {}\n        newRow[\"a\"]=row[\"x\"]\n        yield newRow\n\n## context is a build-in variable.\ncontext.build_result(process())\n","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"a\",\n\t\t\t\t\"type\": \"long\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"a\": 120\n\t\t},\n\t\t{\n\t\t\t\"a\": 100\n\t\t}\n\t]\n}"}]},{"kind":2,"language":"mlsql","value":"select * from b_output as output;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"a\",\n\t\t\t\t\"type\": \"long\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"a\": 120\n\t\t},\n\t\t{\n\t\t\t\"a\": 100\n\t\t}\n\t]\n}"}]}]