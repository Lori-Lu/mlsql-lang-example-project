[{"kind":1,"language":"markdown","value":"## Buildin ML Algorithm","outputs":[]},{"kind":2,"language":"mlsql","value":"include hdfs.`./src/common/mock_data.mlsql`;","outputs":[{"mime":"text/html","value":"<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n<style>table{border-collapse:collapse; }table,td,th{border:1px dotted #ccc; padding:5px;}th {background:#444} </style>\n</head>\n<body><table>\n  <thead>\n    <tr>\n      <th>features</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>5.1,3.5,1.4,0.2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>5.1,3.5,1.4,0.2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>5.1,3.5,1.4,0.2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>4.4,2.9,1.4,0.2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>5.1,3.5,1.4,0.2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>5.1,3.5,1.4,0.2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>5.1,3.5,1.4,0.2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>4.7,3.2,1.3,0.2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>5.1,3.5,1.4,0.2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>5.1,3.5,1.4,0.2</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table></body>\n</html>"}]},{"kind":2,"language":"mlsql","value":"-- create mock validate/test dataset.\nselect vec_dense(features) as features, label as label from mock_data as mock_data;\nselect * from mock_data as mock_data_validate;\nselect * from mock_data as mock_data_test;","outputs":[{"mime":"text/html","value":"<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n<style>table{border-collapse:collapse; }table,td,th{border:1px dotted #ccc; padding:5px;}th {background:#444} </style>\n</head>\n<body><table>\n  <thead>\n    <tr>\n      <th>features</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>[object Object]</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>[object Object]</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>[object Object]</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>[object Object]</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>[object Object]</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>[object Object]</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>[object Object]</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>[object Object]</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>[object Object]</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>[object Object]</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table></body>\n</html>"}]},{"kind":2,"language":"mlsql","value":"!show et;","outputs":[]},{"kind":2,"language":"mlsql","value":"!show et;\n!lastCommand named ets;\nselect * from ets where name like \"%Random%\" as output;","outputs":[{"mime":"text/html","value":"<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n<style>table{border-collapse:collapse; }table,td,th{border:1px dotted #ccc; padding:5px;}th {background:#444} </style>\n</head>\n<body><table>\n  <thead>\n    <tr>\n      <th>name</th>\n      <th>algType</th>\n      <th>sparkCompatibility</th>\n      <th>doc</th>\n      <th>docType</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>RandomForest</td>\n      <td>algorithm</td>\n      <td>2.4.x,3.1.x</td>\n      <td>\n <a href=\"http://en.wikipedia.org/wiki/Random_forest\">Random Forest</a> learning algorithm for\n classification.\n It supports both binary and multiclass labels, as well as both continuous and categorical\n features.\n\n Use \"load modelParams.`RandomForest` as output;\"\n\n to check the available hyper parameters;\n\n Use \"load modelExample.`RandomForest` as output;\"\n get example.\n\n If you wanna check the params of model you have trained, use this command:\n\n ```\n load modelExplain.`/tmp/model` where alg=\"RandomForest\" as outout;\n ```\n\n    </td>\n      <td>html</td>\n    </tr>\n  </tbody>\n</table></body>\n</html>"}]},{"kind":2,"language":"mlsql","value":"!show et/RandomForest;\nload modelParams.`RandomForest` as output;","outputs":[{"mime":"text/html","value":"<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n<style>table{border-collapse:collapse; }table,td,th{border:1px dotted #ccc; padding:5px;}th {background:#444} </style>\n</head>\n<body><table>\n  <thead>\n    <tr>\n      <th>param</th>\n      <th>description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>evaluateTable</td>\n      <td> The table name of test dataset when tranning (undefined)</td>\n    </tr>\n    <tr>\n      <td>keepVersion</td>\n      <td> If set true, then every time you run the algorithm, it will generate a new directory to save the model. (default: true)</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].cacheNodeIds</td>\n      <td> If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees. (default: false)</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].checkpointInterval</td>\n      <td> set checkpoint interval (>= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext (default: 10)</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].featureSubsetStrategy</td>\n      <td> The number of features to consider for splits at each tree node. Supported options: auto, all, onethird, sqrt, log2, (0.0-1.0], [1-n]. (default: auto)</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].featuresCol</td>\n      <td> features column name (default: features)</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].impurity</td>\n      <td> Criterion used for information gain calculation (case-insensitive). Supported options: entropy, gini (default: gini)</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].labelCol</td>\n      <td> label column name (default: label)</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].maxBins</td>\n      <td> Max number of bins for discretizing continuous features.  Must be >=2 and >= number of categories for any categorical feature. (default: 32)</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].maxDepth</td>\n      <td> Maximum depth of the tree. (>= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes. (default: 5)</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].maxMemoryInMB</td>\n      <td> Maximum memory in MB allocated to histogram aggregation. (default: 256)</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].minInfoGain</td>\n      <td> Minimum information gain for a split to be considered at a tree node. (default: 0.0)</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].minInstancesPerNode</td>\n      <td> Minimum number of instances each child must have after split.  If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be >= 1. (default: 1)</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].numTrees</td>\n      <td> Number of trees to train (>= 1) (default: 20)</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].predictionCol</td>\n      <td> prediction column name (default: prediction)</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].probabilityCol</td>\n      <td> Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities (default: probability)</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].rawPredictionCol</td>\n      <td> raw prediction (a.k.a. confidence) column name (default: rawPrediction)</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].seed</td>\n      <td> random seed (default: 207336481)</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].subsamplingRate</td>\n      <td> Fraction of the training data used for learning each decision tree, in range (0, 1]. (default: 1.0)</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].thresholds</td>\n      <td> Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values > 0 excepting that at most one value may be 0. The class with largest value p/t is predicted, where p is the original probability of that class and t is the class's threshold (undefined)</td>\n    </tr>\n  </tbody>\n</table></body>\n</html>"}]},{"kind":2,"language":"mlsql","value":"-- use RandomForest\ntrain mock_data as RandomForest.`/tmp/model` where\nkeepVersion=\"true\" \nand evaluateTable=\"mock_data_validate\"\n\nand `fitParam.0.labelCol`=\"label\"\nand `fitParam.0.featuresCol`=\"features\"\nand `fitParam.0.maxDepth`=\"2\"\n\nand `fitParam.1.featuresCol`=\"features\"\nand `fitParam.1.labelCol`=\"label\"\nand `fitParam.1.maxDepth`=\"10\"\n;","outputs":[{"mime":"text/html","value":"<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n<style>table{border-collapse:collapse; }table,td,th{border:1px dotted #ccc; padding:5px;}th {background:#444} </style>\n</head>\n<body><table>\n  <thead>\n    <tr>\n      <th>name</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>---------------</td>\n      <td>------------------</td>\n    </tr>\n    <tr>\n      <td>modelPath</td>\n      <td>/_model_2/model/1</td>\n    </tr>\n    <tr>\n      <td>algIndex</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>alg</td>\n      <td>org.apache.spark.ml.classification.RandomForestClassifier</td>\n    </tr>\n    <tr>\n      <td>metrics</td>\n      <td>f1:  0.7625000000000001\nweightedPrecision:  0.8444444444444446\nweightedRecall:  0.7999999999999999\naccuracy:  0.8</td>\n    </tr>\n    <tr>\n      <td>status</td>\n      <td>success</td>\n    </tr>\n    <tr>\n      <td>message</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>startTime</td>\n      <td>20210830 46:11:53:408</td>\n    </tr>\n    <tr>\n      <td>endTime</td>\n      <td>20210830 46:11:55:439</td>\n    </tr>\n    <tr>\n      <td>trainParams</td>\n      <td>Map(labelCol -> label, featuresCol -> features, maxDepth -> 10)</td>\n    </tr>\n    <tr>\n      <td>---------------</td>\n      <td>------------------</td>\n    </tr>\n    <tr>\n      <td>modelPath</td>\n      <td>/_model_2/model/0</td>\n    </tr>\n    <tr>\n      <td>algIndex</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>alg</td>\n      <td>org.apache.spark.ml.classification.RandomForestClassifier</td>\n    </tr>\n    <tr>\n      <td>metrics</td>\n      <td>f1:  0.7625000000000001\nweightedPrecision:  0.8444444444444446\nweightedRecall:  0.7999999999999999\naccuracy:  0.8</td>\n    </tr>\n    <tr>\n      <td>status</td>\n      <td>success</td>\n    </tr>\n    <tr>\n      <td>message</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>startTime</td>\n      <td>20210830 46:11:55:440</td>\n    </tr>\n    <tr>\n      <td>endTime</td>\n      <td>20210830 46:11:56:424</td>\n    </tr>\n    <tr>\n      <td>trainParams</td>\n      <td>Map(maxDepth -> 2, featuresCol -> features, labelCol -> label)</td>\n    </tr>\n  </tbody>\n</table></body>\n</html>"}]},{"kind":2,"language":"mlsql","value":"predict mock_data_test as RandomForest.`/tmp/model`  as predicted_table;","outputs":[{"mime":"text/html","value":"<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n<style>table{border-collapse:collapse; }table,td,th{border:1px dotted #ccc; padding:5px;}th {background:#444} </style>\n</head>\n<body><table>\n  <thead>\n    <tr>\n      <th>features</th>\n      <th>label</th>\n      <th>rawPrediction</th>\n      <th>probability</th>\n      <th>prediction</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>[object Object]</td>\n      <td>0</td>\n      <td>[object Object]</td>\n      <td>[object Object]</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>[object Object]</td>\n      <td>1</td>\n      <td>[object Object]</td>\n      <td>[object Object]</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>[object Object]</td>\n      <td>0</td>\n      <td>[object Object]</td>\n      <td>[object Object]</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>[object Object]</td>\n      <td>0</td>\n      <td>[object Object]</td>\n      <td>[object Object]</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>[object Object]</td>\n      <td>1</td>\n      <td>[object Object]</td>\n      <td>[object Object]</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>[object Object]</td>\n      <td>0</td>\n      <td>[object Object]</td>\n      <td>[object Object]</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>[object Object]</td>\n      <td>0</td>\n      <td>[object Object]</td>\n      <td>[object Object]</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>[object Object]</td>\n      <td>1</td>\n      <td>[object Object]</td>\n      <td>[object Object]</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>[object Object]</td>\n      <td>0</td>\n      <td>[object Object]</td>\n      <td>[object Object]</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>[object Object]</td>\n      <td>0</td>\n      <td>[object Object]</td>\n      <td>[object Object]</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table></body>\n</html>"}]},{"kind":2,"language":"mlsql","value":"run predicted_table as ConfusionMatrix.`/tmp/models/model_acc` where \nactualCol=\"label\" and \npredictCol=\"prediction\";\nload parquet.`/tmp/models/model_acc/detail` as output;","outputs":[{"mime":"text/html","value":"<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n<style>table{border-collapse:collapse; }table,td,th{border:1px dotted #ccc; padding:5px;}th {background:#444} </style>\n</head>\n<body><table>\n  <thead>\n    <tr>\n      <th>lable</th>\n      <th>name</th>\n      <th>value</th>\n      <th>desc</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0.0</td>\n      <td>PPV</td>\n      <td>0.7777777777777778</td>\n      <td>Precision or positive prediction value</td>\n    </tr>\n    <tr>\n      <td>0.0</td>\n      <td>FN</td>\n      <td>0</td>\n      <td>False negative [eqv with miss, Type II error]</td>\n    </tr>\n    <tr>\n      <td>1.0</td>\n      <td>FN</td>\n      <td>2</td>\n      <td>False negative [eqv with miss, Type II error]</td>\n    </tr>\n    <tr>\n      <td>1.0</td>\n      <td>PPV</td>\n      <td>1.0</td>\n      <td>Precision or positive prediction value</td>\n    </tr>\n    <tr>\n      <td>0.0</td>\n      <td>FDR</td>\n      <td>0.2222222222222222</td>\n      <td>False discovery rate</td>\n    </tr>\n    <tr>\n      <td>0.0</td>\n      <td>TPR</td>\n      <td>1.0</td>\n      <td>Sensitivity or true positive rate [eqv with hit rate, recall]</td>\n    </tr>\n    <tr>\n      <td>0.0</td>\n      <td>SPC</td>\n      <td>0.3333333333333333</td>\n      <td>Specificity or true negative rate</td>\n    </tr>\n    <tr>\n      <td>1.0</td>\n      <td>TPR</td>\n      <td>0.3333333333333333</td>\n      <td>Sensitivity or true positive rate [eqv with hit rate, recall]</td>\n    </tr>\n    <tr>\n      <td>1.0</td>\n      <td>SPC</td>\n      <td>1.0</td>\n      <td>Specificity or true negative rate</td>\n    </tr>\n    <tr>\n      <td>1.0</td>\n      <td>TN</td>\n      <td>7</td>\n      <td>True negative [eqv with correct rejection]</td>\n    </tr>\n    <tr>\n      <td>1.0</td>\n      <td>FP</td>\n      <td>0</td>\n      <td>False positive [eqv with false alarm, Type I error]</td>\n    </tr>\n    <tr>\n      <td>0.0</td>\n      <td>TN</td>\n      <td>1</td>\n      <td>True negative [eqv with correct rejection]</td>\n    </tr>\n    <tr>\n      <td>0.0</td>\n      <td>FP</td>\n      <td>2</td>\n      <td>False positive [eqv with false alarm, Type I error]</td>\n    </tr>\n    <tr>\n      <td>1.0</td>\n      <td>TP</td>\n      <td>1</td>\n      <td>True positive [eqv with hit]</td>\n    </tr>\n    <tr>\n      <td>0.0</td>\n      <td>TP</td>\n      <td>7</td>\n      <td>True positive [eqv with hit]</td>\n    </tr>\n    <tr>\n      <td>0.0</td>\n      <td>NPV</td>\n      <td>1.0</td>\n      <td>Negative predictive value</td>\n    </tr>\n    <tr>\n      <td>0.0</td>\n      <td>FPR</td>\n      <td>0.6666666666666666</td>\n      <td>Fall-out or false positive rate</td>\n    </tr>\n    <tr>\n      <td>1.0</td>\n      <td>NPV</td>\n      <td>0.7777777777777778</td>\n      <td>Negative predictive value</td>\n    </tr>\n    <tr>\n      <td>1.0</td>\n      <td>FPR</td>\n      <td>0.0</td>\n      <td>Fall-out or false positive rate</td>\n    </tr>\n    <tr>\n      <td>1.0</td>\n      <td>FDR</td>\n      <td>0.0</td>\n      <td>False discovery rate</td>\n    </tr>\n    <tr>\n      <td>1.0</td>\n      <td>FNR</td>\n      <td>0.6666666666666666</td>\n      <td>Miss Rate or False Negative Rate</td>\n    </tr>\n    <tr>\n      <td>1.0</td>\n      <td>ACC</td>\n      <td>0.8</td>\n      <td>Accuracy</td>\n    </tr>\n    <tr>\n      <td>0.0</td>\n      <td>FNR</td>\n      <td>0.0</td>\n      <td>Miss Rate or False Negative Rate</td>\n    </tr>\n    <tr>\n      <td>0.0</td>\n      <td>ACC</td>\n      <td>0.8</td>\n      <td>Accuracy</td>\n    </tr>\n  </tbody>\n</table></body>\n</html>"}]},{"kind":2,"language":"mlsql","value":"register RandomForest.`/tmp/model` as model_predict;","outputs":[{"mime":"text/html","value":"<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n<style>table{border-collapse:collapse; }table,td,th{border:1px dotted #ccc; padding:5px;}th {background:#444} </style>\n</head>\n<body><table>\n  <thead>\n    <tr>\n      <th>name</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>uid</td>\n      <td>rfc_6f30e8ffc7e2</td>\n    </tr>\n    <tr>\n      <td>numFeatures</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <td>numClasses</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>numTrees</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <td>treeWeights</td>\n      <td>1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].featuresCol</td>\n      <td>features</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].labelCol</td>\n      <td>label</td>\n    </tr>\n    <tr>\n      <td>fitParam.[group].maxDepth</td>\n      <td>10</td>\n    </tr>\n  </tbody>\n</table></body>\n</html>"}]},{"kind":2,"language":"mlsql","value":"select vec_array(model_predict(features)) from mock_data as output;","outputs":[{"mime":"text/html","value":"<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n<style>table{border-collapse:collapse; }table,td,th{border:1px dotted #ccc; padding:5px;}th {background:#444} </style>\n</head>\n<body><table>\n  <thead>\n    <tr>\n      <th>UDF:vec_array(UDF(features))</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0.7181068931068931,0.28189310689310687</td>\n    </tr>\n    <tr>\n      <td>0.7181068931068931,0.28189310689310687</td>\n    </tr>\n    <tr>\n      <td>0.7181068931068931,0.28189310689310687</td>\n    </tr>\n    <tr>\n      <td>0.7895949883449884,0.21040501165501163</td>\n    </tr>\n    <tr>\n      <td>0.7181068931068931,0.28189310689310687</td>\n    </tr>\n    <tr>\n      <td>0.7181068931068931,0.28189310689310687</td>\n    </tr>\n    <tr>\n      <td>0.7181068931068931,0.28189310689310687</td>\n    </tr>\n    <tr>\n      <td>0.24451923076923077,0.7554807692307691</td>\n    </tr>\n    <tr>\n      <td>0.7181068931068931,0.28189310689310687</td>\n    </tr>\n    <tr>\n      <td>0.7181068931068931,0.28189310689310687</td>\n    </tr>\n  </tbody>\n</table></body>\n</html>"}]}]