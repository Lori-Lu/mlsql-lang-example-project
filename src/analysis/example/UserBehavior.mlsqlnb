[{"kind":1,"language":"markdown","value":"# 使用MLSQL对1亿条淘宝用户行为数据分析\n\n一个CSV文件，时间区间为 2017-11-25 到 2017-12-03，总计 100,150,807 条记录，大小为 3.5 G。\n下载地址：\n\n1. 阿里云： https://tianchi.aliyun.com/dataset/dataDetail?dataId=649&userId=1#1\n\n也可参考 [bigdata_analyse](https://github.com/TurboWay/bigdata_analyse) 获取数据。\n\n下载后解压放到 `./example-data/custom-download` 目录下。\n\n分析过程中，会有全量去重等比较消耗软件内存的操作，需要4G内存才能运行，请在`.mlsql.config` 中添加如下配置：\n\n```\nengine.memory=4048m\n```\n\n\n","outputs":[]},{"kind":2,"language":"mlsql","value":"-- 设置下Python环境。因为我们会用到Python做图形绘制 \n-- 用户如果需要可以进文件进行修改\ninclude project.`./src/common/PyHeader.mlsql`;","outputs":[]},{"kind":2,"language":"mlsql","value":"load csv.`./example-data/custom-download/UserBehavior.csv` \nwhere header=\"false\"\nas raw_user_behavior;\n\nselect cast(_c0 as long) as user_id,\ncast(_c1 as long) as item_id,\ncast(_c2 as long) as catagory_id,\n_c3 as behavior_type,\ncast(_c4 as long) as `timestamp`\nfrom raw_user_behavior\nas user_behavior;","outputs":[]},{"kind":2,"language":"mlsql","value":"-- CSV 处理较慢。我们可以将数据保存到本地数据湖中\n-- 并行度为4\nsave overwrite user_behavior as delta.`test.user_behavior` where fileNum=\"4\";","outputs":[]},{"kind":2,"language":"mlsql","value":"load delta.`test.user_behavior` as user_behavior;","outputs":[]},{"kind":2,"language":"mlsql","value":"select count(*) from user_behavior as output;","outputs":[]},{"kind":1,"language":"markdown","value":"先进行数据清理，主要包括：\n\n1. 删除重复值\n2. 时间戳格式化\n3. 删除异常值。","outputs":[]},{"kind":2,"language":"mlsql","value":"--数据清洗，去掉完全重复的数据\nselect user_id, item_id, catagory_id, behavior_type, `timestamp`\nfrom user_behavior\ngroup by user_id, item_id, catagory_id, behavior_type, `timestamp`\nas user_behavior_1;\n\n--我的电脑大概需要30多秒。我们可以保存起来，避免后续重复计算。\n-- 保存大概需要一分钟\nsave overwrite user_behavior_1 as delta.`test.user_behavior_deduplicate`;","outputs":[]},{"kind":2,"language":"mlsql","value":"load delta.`test.user_behavior_deduplicate` as user_behavior_deduplicate;","outputs":[]},{"kind":2,"language":"mlsql","value":"\n--数据清洗，时间戳格式化成 timestamp\nselect user_id, item_id, catagory_id, behavior_type, timestamp, from_unixtime(timestamp, 'yyyy-MM-dd HH:mm:ss')\nas datatime\nfrom user_behavior_deduplicate\nas user_behavior_deduplicate_clean;\n\n--数据清洗，去掉时间异常的数据\nselect user_id, item_id, catagory_id, behavior_type, timestamp,datatime\nfrom user_behavior_deduplicate_clean\nwhere cast(datatime as date) between '2017-11-25' and '2017-12-03'\nas user_behavior_deduplicate_clean;\n\nsave overwrite user_behavior_deduplicate_clean as delta.`test.user_behavior_deduplicate_clean` \nwhere mergeSchema=\"true\";\n","outputs":[]},{"kind":2,"language":"mlsql","value":"load delta.`test.user_behavior_deduplicate_clean` as user_behavior_deduplicate_clean;","outputs":[]},{"kind":1,"language":"markdown","value":"## 数据分析可视化\n###  用户流量及购物情况","outputs":[]},{"kind":2,"language":"mlsql","value":"--总访问量PV，总用户量UV\nselect sum(case when behavior_type = 'pv' then 1 else 0 end) as pv,\n       count(distinct user_id) as uv\nfrom user_behavior_deduplicate_clean \nas output;","outputs":[]},{"kind":2,"language":"mlsql","value":"--日均访问量，日均用户量\nselect cast(datatime as date) as day,\n       sum(case when behavior_type = 'pv' then 1 else 0 end) as pv,\n       count(distinct user_id) as uv\nfrom user_behavior_deduplicate_clean\ngroup by cast(datatime as date)\norder by day\nas day_pv_uv;\n\n-- cache the day_pv_uv table\nsave overwrite day_pv_uv as delta.`test.day_pv_uv`;","outputs":[]},{"kind":2,"language":"mlsql","value":"-- 查看下我们现在的环境\n!sh conda env list;","outputs":[]},{"kind":2,"language":"mlsql","value":"-- 检查我们电脑上是不是安装了 pyecharts\n!sh pip list;\n!lastCommand named pips;\nselect * from pips where content like \"%pyecharts%\" as output;","outputs":[]},{"kind":2,"language":"mlsql","value":"load delta.`test.day_pv_uv` as day_pv_uv;","outputs":[]},{"kind":1,"language":"markdown","value":"## Python使用\n\nPython的代码提示有几个技巧：\n\n1. 如果你是conda管理，可以在vscode命令面板中(`⇧⌘P`)选择： `Python: select interpreter` 选择合适的环境，从而获得正确的提示。\n2. 如果你安装了包，有的时候没反应过来，在命令面板(`⇧⌘P`)中选择： `Python: Restart Language Server` 即可生效。\n\n**注意**\n\n在MLSQL中，Python代码并不是直接提交给Python解释器执行的，而是MLSQL执行的。MLSQL无法感知到你在VScode配置的选择。你需要通过\n\n```python\n#%env=source /Users/allwefantasy/opt/anaconda3/bin/activate ray1.3.0\n```\n\n这样的指令来指定需要执行的python环境。\n\n\n\n","outputs":[]},{"kind":2,"language":"python","value":"#%python\n#%input=day_pv_uv\n#%schema=st(field(content,string),field(mime,string))\n\nfrom pyjava.api.mlsql import RayContext,PythonContext\nimport pandas as pd\nfrom pyecharts import options as opts\nfrom pyecharts.charts import Line\nimport os\n\n# 这句是为了代码提示\ncontext:PythonContext = context\n\nray_context = RayContext.connect(globals(),None)\n\ndata = [item for item in ray_context.collect()]\ndf = pd.DataFrame.from_records(data)\n# 绘制每天PV图\nc3 = (\n    Line()\n    .add_xaxis(list(df['day']))\n    .add_yaxis(\"pv\", list(df['pv']))    \n    .set_global_opts(title_opts=opts.TitleOpts(title=\"每天pv数\"))\n    .render(\"line_dnu.html\")\n)\n\nhtml = \"\"\nwith open(\"line_dnu.html\") as file:\n   html = \"\\n\".join(file.readlines())\n\nos.remove(\"line_dnu.html\")\ncontext.build_result([{\"content\":html,\"mime\":\"html\"}])\n","outputs":[]},{"kind":2,"language":"python","value":"#%python\n#%input=day_pv_uv\n#%schema=st(field(content,string),field(mime,string))\n\nfrom pyjava.api.mlsql import RayContext,PythonContext\nfrom pyjava.api import Utils\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport base64\n\n# 这句是为了代码提示\ncontext:PythonContext = context\n\nray_context = RayContext.connect(globals(),None)\ndf = ray_context.to_pandas()\n\nplt.rcParams['font.sans-serif']=['SimHei'] #用来正常显示中文标签\nplt.rcParams['axes.unicode_minus'] = False #用来正常显示负号\n\nx1 = list(df['day'])\ny1 = list(df['pv'])\n\nx2 = list(df['day'])\ny2 = list(df['uv'])\n\nl1=plt.plot(x1,y1,'r--',label='PV')\nl2=plt.plot(x2,y2,'g--',label='UV')\n\nplt.plot(x1,y1,'ro-',x2,y2,'g+-')\nplt.title('PV/UV情况')\nplt.xlabel('row')\nplt.ylabel('column')\nplt.legend()\n\n# 也可以直接用 .show() 不过是弹出框\n# plt.show()\n# context.build_result([{\"content\":\"{}\",\"mime\":\"json\"}])\n\n# 我们也可以保存成png图片再渲染\nUtils.show_plt(plt,context)","outputs":[]},{"kind":2,"language":"mlsql","value":"--每个用户的购物情况，加工到 user_behavior_count\nselect user_id,\n       sum(case when behavior_type = 'pv' then 1 else 0 end) as pv,   --点击数\n       sum(case when behavior_type = 'fav' then 1 else 0 end) as fav,  --收藏数\n       sum(case when behavior_type = 'cart' then 1 else 0 end) as cart,  --加购物车数\n       sum(case when behavior_type = 'buy' then 1 else 0 end) as buy  --购买数\nfrom user_behavior_deduplicate_clean\ngroup by user_id as user_behavior_count;\n\n\n--复购率：产生两次或两次以上购买的用户占购买用户的比例\nselect sum(case when buy > 1 then 1 else 0 end) / sum(case when buy > 0 then 1 else 0 end)\nfrom user_behavior_count as output;","outputs":[]},{"kind":2,"language":"mlsql","value":"--2、用户行为转化漏斗\n\n--点击/(加购物车+收藏)/购买 , 各环节转化率\nselect a.pv,\n       a.fav,\n       a.cart,\n       a.fav + a.cart as `fav+cart`,\n       a.buy,\n       round((a.fav + a.cart) / a.pv, 4) as pv2favcart,\n       round(a.buy / (a.fav + a.cart), 4) as favcart2buy,\n       round(a.buy / a.pv, 4) as pv2buy\nfrom(\nselect sum(pv) as pv,   --点击数\n       sum(fav) as fav,  --收藏数\n       sum(cart) as cart,  --加购物车数\n       sum(buy) as buy  --购买数\nfrom user_behavior_count\n) as a\nas output;","outputs":[]},{"kind":2,"language":"mlsql","value":"--3、用户行为习惯与人群特征\n\n-- 一天的活跃时段分布\nselect hour(datatime) as hour,\n       sum(case when behavior_type = 'pv' then 1 else 0 end) as pv,   --点击数\n       sum(case when behavior_type = 'fav' then 1 else 0 end) as fav,  --收藏数\n       sum(case when behavior_type = 'cart' then 1 else 0 end) as cart,  --加购物车数\n       sum(case when behavior_type = 'buy' then 1 else 0 end) as buy  --购买数\nfrom user_behavior_deduplicate_clean\ngroup by hour(datatime)\norder by hour\nas activesByHour;\n\nset input=\"activesByHour\";\n\n!python conf \"x=hour\";\n!python conf \"y=buy\";\n!python conf \"yName=购买次数\";\n!python conf \"title=购买次数小时分布图\";\n\n\n-- 包含一个绘图的mlsql脚本进来\ninclude project.`./src/common/curve.mlsql`;","outputs":[]}]