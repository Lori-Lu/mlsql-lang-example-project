[{"kind":1,"language":"markdown","value":"## A Tour of MLSQL\n\nMLSQL is a clould-native destributed language designed for data + AI.\n\nKeywords:\n\n1. Data + AI\n2. Cloud Native\n3. Distributed\n4. Language","outputs":[]},{"kind":1,"language":"markdown","value":"## Show Language Version","outputs":[]},{"kind":2,"language":"mlsql","value":"!show version;","outputs":[]},{"kind":1,"language":"markdown","value":"## Command lines in MLSQL\n\n如同我们见到的第一个命令 `!show`, MLSQL还提供了非常多的命令作为工具帮助我们。","outputs":[]},{"kind":2,"language":"mlsql","value":"-- 查看表结构\nselect 1 as a as mockTable;\n!desc mockTable;","outputs":[]},{"kind":1,"language":"markdown","value":"## 数据加载\n\nMLSQL 使用申明式的`Load`语法加载数据源并且将其映射为一张表。\n我们知道，数据的来源可能是千差万别的，可能是我们本地电脑上的csv,excel,json数据，\n可能是网络http提供的数据，亦或是某种数据库的数据，比如Hive，\nDelta Lake等。","outputs":[]},{"kind":1,"language":"markdown","value":"### 模拟数据\n\n通过set设置一个变量，变量内容为两条json。之后我们可以通过`jsonStr`解析该数据，从而将其映射为一张表。\n对于测试比较有用。","outputs":[]},{"kind":2,"language":"mlsql","value":"-- 使用json作为模拟数据\nset abc='''\n{ \"x\": 100, \"y\": 200, \"z\": 200 ,\"dataType\":\"A group\"}\n{ \"x\": 120, \"y\": 100, \"z\": 260 ,\"dataType\":\"B group\"}\n''';\nload jsonStr.`abc` as table1;","outputs":[]},{"kind":2,"language":"mlsql","value":"-- 使用csv作为模拟数据\n\nset rawData='''\nname,age\nzhangsan,1\nlisi,2\n''';\nload csvStr.`rawData` options header=\"true\" and inferSchema=\"true\"\nas output;","outputs":[]},{"kind":1,"language":"markdown","value":"### 加载csv格式数据\n\nMLSQL语言支持很方便的加载CSV格式数据。\n其中，路径可以指向文件也可以指向只包含csv文件的目录。","outputs":[]},{"kind":2,"language":"mlsql","value":"load csv.`./example-data/csv/test.csv` where header=\"true\" as output;","outputs":[]},{"kind":1,"language":"markdown","value":"### 加载excel数据","outputs":[]},{"kind":2,"language":"mlsql","value":"load excel.`./example-data/excel/example_en.xlsx` \nwhere header=\"true\" as example_en_table;","outputs":[]},{"kind":1,"language":"markdown","value":"### 加载text文件\n\n可以指定目录或者单个文件","outputs":[]},{"kind":2,"language":"mlsql","value":"load text.`./example-data/text` as textfiles;","outputs":[]},{"kind":1,"language":"markdown","value":"### 加载XML文件\n","outputs":[]},{"kind":2,"language":"mlsql","value":"-- 需要额外安装一个插件\n!plugin app add - \"mlsql-ds-3.0\";","outputs":[]},{"kind":2,"language":"mlsql","value":"load xml.`./example-data/xml/a.xml` where rowTag=\"one\" as xmlfile;","outputs":[]},{"kind":1,"language":"markdown","value":"### 加载Parquet文件","outputs":[]},{"kind":2,"language":"mlsql","value":"load parquet.`./example-data/parquet` as parquetTable;","outputs":[]},{"kind":1,"language":"markdown","value":"## 加载MySQL数据库","outputs":[]},{"kind":1,"language":"markdown","value":"## 变量\n\n变量设置广泛的存在于各种语言中。MLSQL通过`Set`语法来完成变量申明。\n\n变量有几个局限性：\n\n1. 变量生命周期为`请求(request)`。也就是针对一次执行有效。这限制了在notebook中的使用范围。\n2. 变量设置完执行不会有任何输出\n","outputs":[]},{"kind":2,"language":"mlsql","value":"set world=\"world\";","outputs":[]},{"kind":2,"language":"mlsql","value":"-- 可以看到， world 变量并没有生效\nselect \"hello ${world}\" as title \nas output;","outputs":[]},{"kind":2,"language":"mlsql","value":"-- 在一个脚本或者一个cell中生效\nset world=\"world\";\n\nselect \"hello ${world}\" as title \nas output;","outputs":[]},{"kind":1,"language":"markdown","value":"变量赋值可以设置发生在两个阶段。\n\n1. compile(默认)\n1. runtime\n\n在解析MLSQL语言时，会有个预处理阶段，预处理阶段会完成：\n\n1. include展开\n2. 命令行展开\n\n预处理之后，得到的脚本才会进行解析和执行，此时为运行时阶段。\n\n默认会在compile，runtime阶段分别运行。如果显示的设置runtime，则只会在runtime阶段运行。","outputs":[]},{"kind":2,"language":"mlsql","value":"-- 这个语句告诉系统，不要缓存表名\nset __table_name_cache__=\"false\";\nset __debug__ = \"true\";\nselect \"foo\" as foo as foo_table;\nset hello=`select foo from foo_table` where type=\"sql\";\nselect \"${hello}\" as name as output;","outputs":[]},{"kind":2,"language":"mlsql","value":"!profiler sql ''' drop view foo_table ''';\nselect foo from foo_table as output;","outputs":[]}]